// Простий детермінований генератор випадкових чисел.
// Усі коментарі максимально докладні українською мовою, щоб пояснити логіку навіть новачкам.

/**
 * Перетворює довільний рядок на 32-бітне ціле число.
 * Це дозволяє нам отримувати повторювані результати для однакових вхідних даних.
 * @param {string} str - Початковий рядок (наприклад, дата народження).
 * @returns {number} 32-бітне ціле число.
 */
function hashStringToInt32(str) {
  // Використовуємо поширений алгоритм, який поступово обчислює хеш.
  let hash = 0;
  for (let i = 0; i < str.length; i += 1) {
    const charCode = str.charCodeAt(i);
    // Зсув і додавання допомагають змішати біти для різних символів.
    hash = (hash << 5) - hash + charCode;
    // Обрізаємо значення до 32 бітів для стабільності.
    hash |= 0;
  }
  return hash;
}

/**
 * Створює генератор випадкових чисел (PRNG) на базі числа seed.
 * Ми використовуємо алгоритм mulberry32: простий та швидкий, але достатньо якісний для візуальних ефектів.
 * @param {number} seedInt - Початкове число (наприклад, хеш від рядка).
 * @returns {{ next: () => number }} Об'єкт із методом next(), що повертає значення у проміжку [0, 1).
 */
function makePrng(seedInt) {
  // Нормалізуємо вхідне значення, щоб уникнути нульового стану генератора.
  let state = seedInt >>> 0;
  if (state === 0) {
    state = 0x1a2b3c4d;
  }

  return {
    /**
     * Повертає наступне "випадкове" число від 0 (включно) до 1 (невключно).
     * Завдяки детермінованості, однаковий seed дає однакову послідовність.
     * @returns {number}
     */
    next() {
      state += 0x6d2b79f5;
      let t = state;
      t = Math.imul(t ^ (t >>> 15), t | 1);
      t ^= t + Math.imul(t ^ (t >>> 7), t | 61);
      return ((t ^ (t >>> 14)) >>> 0) / 4294967296;
    },
  };
}

// Експортуємо функції у глобальний скоуп для подальшого використання в інших скриптах.
window.hashStringToInt32 = hashStringToInt32;
window.makePrng = makePrng;
